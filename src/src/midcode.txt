         //   println!("ok");
            //if let Some(&who) = gnecko.peek() {
                gnecko.advance_cursor();
                if let Some(&what) = gnecko.peek() {
                    gnecko.advance_cursor();
                    if let Some(&wheree) = gnecko.peek() {
                        let runthis = [drop, who, what, wheree];
                        println!("{:?}", runthis);
                        funcprogram(runthis)
                    }
                
                }



one second on timeline 
1 million years


1 sec = 1 million years
4,200

while let Some(drop) = gnecko.peek() {

        let drop_str = drop.to_string(); 
        //println!("{:?}", drop);
        //if _intention.contains(&drop.to_string()) {
            //println!("intention: {}", drop);
         //   request.push(drop_str.clone())
       // } 
      //  if _who.contains(&drop.to_string()) {
            //println!("who: {}", drop.to_string());
       //     request.push(drop_str.clone())
       // }
       request.push(drop_str.clone());
        //gnecko.next();
        //i//f _where.contains(&drop_str) {
         //   println!("who: {}", drop_str)
           // match gnecko.peek() {
          //      Some(optional) => {
                   // let optional = gnecko.peek().unwrap();
                //  println!("{:?}", optional);
             //       request.push(optional.to_string());
                    
              //  },
            //None => { request.push(drop_str.to_string()); }